public class Heap{

    private int[] heap;
    private int size;

    public Heap(int capacity){
        this.heap = new int[capacity];
        this.size = -1;
        this.capacity = capacity;
    }

    public int getSize(){
        return this.size;
    }

    public void add(int item){
        if(this.size >= this.capacity){
            System.out.println("Heap is full");
        } else{
            if(this.size < 0){
                this.size++;
                this.heap[this.size] = item;
            } else{
                this.size++;
                this.heap[this.size] = item;
                heapifyUp(this.size);
            }
        }
        }

    public int poll(){
        if(this.size < 0){
            return -1;
        } else{
            int item = this.heap[0];
            this.heap[0] = this.heap[this.size];
            this.size--;
            heapifyDown(0);
        }
    }
//    public int remove(int item){
  //      for(int i = 0; i < this.size; i++){
   //         if(this.heap[i] == item){
    //            this.heap[i]
          //  }
  //      }
   // }

    public void heapifyDown(int i){
        if(i*2 + 1 > this.size){
            return;
        } else{
            if(this.heap[i*2 + 1] > this.heap[i]){
                int temp = this.heap[i*2 + 1];
                this.heap[i*2 + 1] = this.heap[i];
                this.heap[i] = temp;
                heapifyDown(i);
                heapifyDown(i*2+1);
            } else if(this.heap[i*2 + 2] > this.heap[i]){
                int temp = this.heap[i*2 + 2];
                this.heap[i*2 + 2] = this.heap[i];
                this.heap[i] = temp;
                heapifyDown(i*2+2);
         } else{
            return;
         }
    }
}
public void heapifyUp(int i){
        if((i - 2)/2 <= this.size){
            return;
        } else{
            if(this.heap[i] > this.heap[(i-2)/2]){
                int temp = this.heap[(i-2)/2];
                this.heap[(i-2)/2] = this.heap[i];
                this.heap[i] = temp;
                heapifyUp((i-2)/2);
         } else{
            return;
         }
    }
}
}
