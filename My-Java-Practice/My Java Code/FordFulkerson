import java.util.List;
import java.util.ArrayList;

public class FordFulkerson{
        protected List<Integer> path;
        protected int flow;//Amount of flow passing through a particular edge
        protected int source;//Source node
        protected int sink;//Sink node
        protected boolean solved;//Checks if the max flow has been calculated
        //Used to keep track of if a node is visited
        //Node i is visited of visited[i] = visitedToken
        protected int visitedToken;
        protected int[] visited;
        protected int maxFlow;//Maximum amount of flow an edge can handle

        protected int[][] capacity;

        public FordFulkerson(Graph graph, Vertex source, Vertex sink){
            this.source = source;
            this.sink = sink;
            this.capacity = new int[graph.getNumVertices()][graph.getNumVertices()];
            this.visited = new int[graph.getNumVertices()];
            this.maxFlow = Integer.MIN_VALUE;
        }

        public void solve(){
            for(int f = dfs(this.source, Integer.MAX_VALUE); f !=0; f = dfs(this.source, Integer.MAX_VALUE)){
                this.visitedToken++;
                this.maxFlow += f;
            }
        }
        public static int dfs(Vertex Vertex, int flow){
            if(Vertex == this.sink){
                return flow;
            }



    }

    }